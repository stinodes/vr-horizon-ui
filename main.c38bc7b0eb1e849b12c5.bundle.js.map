{"version":3,"file":"main.c38bc7b0eb1e849b12c5.bundle.js","sources":["webpack:///./lib/Components/styles.js"],"sourcesContent":["// @flow\r\nimport {\r\n  compose,\r\n  // layout\r\n  space,\r\n  display,\r\n  width,\r\n  minWidth,\r\n  maxWidth,\r\n  height,\r\n  minHeight,\r\n  maxHeight,\r\n  verticalAlign,\r\n  //flex\r\n  alignItems,\r\n  alignContent,\r\n  justifyContent,\r\n  justifyItems,\r\n  flex,\r\n  flexWrap,\r\n  flexBasis,\r\n  flexDirection,\r\n  justifySelf,\r\n  alignSelf,\r\n  order,\r\n  // typo\r\n  fontSize,\r\n  fontWeight,\r\n  textAlign,\r\n  letterSpacing,\r\n  lineHeight,\r\n  // position\r\n  position as positionStyle,\r\n  top,\r\n  left,\r\n  right,\r\n  bottom,\r\n} from 'styled-system'\r\nimport { path } from 'ramda'\r\nimport { tint, shade } from 'polished'\r\n\r\nexport const layout = compose(\r\n  space,\r\n  display,\r\n  minWidth,\r\n  maxWidth,\r\n  height,\r\n  minHeight,\r\n  maxHeight,\r\n  verticalAlign,\r\n  width,\r\n)\r\nexport const flexBox = compose(\r\n  () => ({ display: 'flex' }),\r\n  alignItems,\r\n  alignContent,\r\n  justifyContent,\r\n  justifyItems,\r\n  flex,\r\n  flexWrap,\r\n  flexBasis,\r\n  flexDirection,\r\n  flex,\r\n  justifySelf,\r\n  alignSelf,\r\n  order,\r\n)\r\nexport const typography = compose(\r\n  fontSize,\r\n  fontWeight,\r\n  textAlign,\r\n  verticalAlign,\r\n  letterSpacing,\r\n  lineHeight,\r\n)\r\n\r\nexport const position = compose(\r\n  positionStyle,\r\n  top,\r\n  left,\r\n  right,\r\n  bottom,\r\n)\r\n\r\ntype ColorStyles = {\r\n  backgroundColor: ?string,\r\n  color: ?string,\r\n}\r\n\r\nconst withValidColor = (fn: string => string) => (color: ?string) => {\r\n  if (!color || color === 'transparent') return color\r\n  return fn(color)\r\n}\r\nexport const interactiveColor = <Props: { disabled?: boolean }>(\r\n  fn: Props => ColorStyles,\r\n) => {\r\n  return (props: Props) => {\r\n    const { color, backgroundColor } = fn(props)\r\n    const hover = withValidColor(tint(0.3))\r\n    const active = withValidColor(shade(0.3))\r\n    return {\r\n      color,\r\n      backgroundColor: props.disabled\r\n        ? hover(backgroundColor)\r\n        : backgroundColor,\r\n      transition: 'color .2s ease, background-color .2s ease',\r\n      outline: 'none',\r\n      ':hover': {\r\n        // color: hover(color),\r\n        backgroundColor: hover(backgroundColor),\r\n      },\r\n      ':active': {\r\n        // color: active(color),\r\n        backgroundColor: active(backgroundColor),\r\n      },\r\n    }\r\n  }\r\n}\r\n\r\nexport const outline = <\r\n  Props: { borderRadius?: number, noOutline?: boolean, theme: any },\r\n>({\r\n  borderRadius,\r\n  focus = true,\r\n  prop,\r\n}: {\r\n  borderRadius?: number | (Props => number),\r\n  focus?: boolean,\r\n  prop?: string,\r\n} = {}) => {\r\n  return (props: Props) => {\r\n    let {\r\n      theme: { colors },\r\n    } = props\r\n    let br\r\n    let focusStyle\r\n    let outlineStyle\r\n    if (typeof borderRadius === 'number') br = borderRadius\r\n    else if (typeof borderRadius === 'function') br = borderRadius(props)\r\n    if (typeof props.borderRadius === 'number') br = props.borderRadius\r\n    else if (typeof props.borderRadius === 'function')\r\n      br = props.borderRadius(props)\r\n\r\n    if (focus)\r\n      focusStyle = {\r\n        '::before': {\r\n          borderColor: 'Highlight',\r\n        },\r\n      }\r\n\r\n    if (!props.noOutline)\r\n      outlineStyle = {\r\n        content: '\" \"',\r\n        display: 'block',\r\n        position: 'absolute',\r\n        top: -3,\r\n        bottom: -3,\r\n        left: -3,\r\n        right: -3,\r\n        borderRadius: br ? br + 3 : 3,\r\n        border: 'transparent 3px solid',\r\n        borderColor:\r\n          prop && props[prop]\r\n            ? typeof props[prop] === 'string'\r\n              ? colors[props[prop]] || props[prop]\r\n              : 'Highlight'\r\n            : 'transparent',\r\n        transition: 'border-color .2s ease',\r\n        pointerEvents: 'none',\r\n      }\r\n\r\n    return {\r\n      position: 'relative',\r\n      borderRadius: br,\r\n      border: 'transparent solid 1.5px',\r\n      '::before': outlineStyle,\r\n      ':focus': focusStyle,\r\n    }\r\n  }\r\n}\r\n\r\nexport const customize = (name: string) => {\r\n  const getCustomization = path(['theme', name])\r\n  return (props: {}) => {\r\n    const customization = getCustomization(props)\r\n    if (!customization) return\r\n    if (typeof customization === 'function') return customization(props)\r\n    return customization\r\n  }\r\n}\r\n"],"mappings":"AAyCA","sourceRoot":""}